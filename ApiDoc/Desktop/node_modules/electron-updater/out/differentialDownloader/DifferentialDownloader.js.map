{"version":3,"file":"DifferentialDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/DifferentialDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { BlockMapDataHolder, configureRequestOptionsFromUrl, createHttpError, DigestTransform, HttpExecutor } from \"builder-util-runtime\"\nimport { BlockMap } from \"builder-util-runtime/out/blockMapApi\"\nimport { close, closeSync, createWriteStream, open } from \"fs-extra-p\"\nimport { OutgoingHttpHeaders, RequestOptions } from \"http\"\nimport { Logger } from \"../main\"\nimport { copyData } from \"./DataSplitter\"\nimport { computeOperations, Operation, OperationKind } from \"./downloadPlanBuilder\"\nimport { checkIsRangesSupported, executeTasks } from \"./multipleRangeDownloader\"\n\nconst inflateRaw: any = BluebirdPromise.promisify(require(\"zlib\").inflateRaw)\n\nexport interface DifferentialDownloaderOptions {\n  readonly oldFile: string\n  readonly newUrl: string\n  readonly logger: Logger\n  readonly newFile: string\n\n  readonly requestHeaders: OutgoingHttpHeaders | null\n\n  readonly useMultipleRangeRequest?: boolean\n}\n\nexport abstract class DifferentialDownloader {\n  private readonly baseRequestOptions: RequestOptions\n\n  fileMetadataBuffer: Buffer | null = null\n\n  private readonly logger: Logger\n\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  constructor(protected readonly blockAwareFileInfo: BlockMapDataHolder, readonly httpExecutor: HttpExecutor<any>, readonly options: DifferentialDownloaderOptions) {\n    this.logger = options.logger\n    this.baseRequestOptions = configureRequestOptionsFromUrl(options.newUrl, {})\n  }\n\n  createRequestOptions(method: \"head\" | \"get\" = \"get\", newUrl?: string | null): RequestOptions {\n    return {\n      ...(newUrl == null ? this.baseRequestOptions : configureRequestOptionsFromUrl(newUrl, {})),\n      method,\n      headers: {\n        ...this.options.requestHeaders,\n        Accept: \"*/*\",\n      } as any,\n    }\n  }\n\n  protected doDownload(oldBlockMap: BlockMap, newBlockMap: BlockMap) {\n    // we don't check other metadata like compressionMethod - generic check that it is make sense to differentially update is suitable for it\n    if (oldBlockMap.version !== newBlockMap.version) {\n      throw new Error(`version is different (${oldBlockMap.version} - ${newBlockMap.version}), full download is required`)\n    }\n\n    const logger = this.logger\n    const operations = computeOperations(oldBlockMap, newBlockMap, logger)\n    if (logger.debug != null) {\n      logger.debug(JSON.stringify(operations, null, 2))\n    }\n\n    let downloadSize = 0\n    let copySize = 0\n    for (const operation of operations) {\n      const length = operation.end - operation.start\n      if (operation.kind === OperationKind.DOWNLOAD) {\n        downloadSize += length\n      }\n      else {\n        copySize += length\n      }\n    }\n\n    const newPackageSize = this.blockAwareFileInfo.size\n    if ((downloadSize + copySize + (this.fileMetadataBuffer == null ? 0 : this.fileMetadataBuffer.length)) !== newPackageSize) {\n      throw new Error(`Internal error, size mismatch: downloadSize: ${downloadSize}, copySize: ${copySize}, newPackageSize: ${newPackageSize}`)\n    }\n\n    logger.info(`Full: ${formatBytes(newPackageSize)}, To download: ${formatBytes(downloadSize)} (${Math.round(downloadSize / (newPackageSize / 100))}%)`)\n\n    return this.downloadFile(operations)\n  }\n\n  private async downloadFile(tasks: Array<Operation>): Promise<any> {\n    const oldFileFd = await open(this.options.oldFile, \"r\")\n    const newFileFd = await open(this.options.newFile, \"w\")\n    const fileOut = createWriteStream(this.options.newFile, {fd: newFileFd})\n    await new BluebirdPromise((resolve, reject) => {\n      const streams: Array<any> = []\n      const digestTransform = new DigestTransform(this.blockAwareFileInfo.sha512)\n      // to simply debug, do manual validation to allow file to be fully written\n      digestTransform.isValidateOnEnd = false\n      streams.push(digestTransform)\n\n      // noinspection JSArrowFunctionCanBeReplacedWithShorthand\n      fileOut.on(\"finish\", () => {\n        (fileOut.close as any)(() => {\n          try {\n            digestTransform.validate()\n          }\n          catch (e) {\n            reject(e)\n            return\n          }\n\n          resolve()\n        })\n      })\n\n      streams.push(fileOut)\n\n      let lastStream = null\n      for (const stream of streams) {\n        stream.on(\"error\", reject)\n        if (lastStream == null) {\n          lastStream = stream\n        }\n        else {\n          lastStream = lastStream.pipe(stream)\n        }\n      }\n\n      const firstStream = streams[0]\n\n      let w: any\n      if (this.options.useMultipleRangeRequest) {\n        w = executeTasks(this, tasks, firstStream, oldFileFd, reject)\n      }\n      else {\n        let attemptCount = 0\n        let actualUrl: string | null = null\n        this.logger.info(`Differential download: ${this.options.newUrl}`)\n        w = (index: number) => {\n          if (index >= tasks.length) {\n            if (this.fileMetadataBuffer != null) {\n              firstStream.write(this.fileMetadataBuffer)\n            }\n            firstStream.end()\n            return\n          }\n\n          const operation = tasks[index++]\n          if (operation.kind === OperationKind.COPY) {\n            copyData(operation, firstStream, oldFileFd, reject, () => w(index))\n          }\n          else {\n            const requestOptions = this.createRequestOptions(\"get\", actualUrl)\n            const range = `bytes=${operation.start}-${operation.end - 1}`\n            requestOptions.headers!!.Range = range;\n            (requestOptions as any).redirect = \"manual\"\n\n            const debug = this.logger.debug\n            if (debug != null) {\n              debug(`effective url: ${actualUrl == null ? \"\" : removeQuery(actualUrl)}, range: ${range}`)\n            }\n\n            const request = this.httpExecutor.doRequest(requestOptions, response => {\n              // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n              if (response.statusCode >= 400) {\n                reject(createHttpError(response))\n              }\n\n              response.pipe(firstStream, {\n                end: false\n              })\n              response.once(\"end\", () => {\n                if (++attemptCount === 100) {\n                  attemptCount = 0\n                  setTimeout(() => w(index), 1000)\n                }\n                else {\n                  w(index)\n                }\n              })\n            })\n            request.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\n              this.logger.info(`Redirect to ${removeQuery(redirectUrl)}`)\n              actualUrl = redirectUrl\n              request.followRedirect()\n            })\n            this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n            request.end()\n          }\n        }\n      }\n\n      w(0)\n    })\n      .then(() => close(oldFileFd))\n      .catch(error => {\n        closeSync(oldFileFd)\n        closeSync(newFileFd)\n        throw error\n      })\n  }\n\n  protected async readRemoteBytes(start: number, endInclusive: number) {\n    const buffer = Buffer.allocUnsafe((endInclusive + 1) - start)\n    const requestOptions = this.createRequestOptions()\n    requestOptions.headers!!.Range = `bytes=${start}-${endInclusive}`\n    let position = 0\n    await this.request(requestOptions, chunk => {\n      chunk.copy(buffer, position)\n      position += chunk.length\n    })\n    return buffer\n  }\n\n  private request(requestOptions: RequestOptions, dataHandler: (chunk: Buffer) => void) {\n    return new BluebirdPromise((resolve, reject) => {\n      const request = this.httpExecutor.doRequest(requestOptions, response => {\n        if (!checkIsRangesSupported(response, reject)) {\n          return\n        }\n\n        response.on(\"data\", dataHandler)\n        response.on(\"end\", () => resolve())\n      })\n      this.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n      request.end()\n    })\n  }\n}\n\nexport async function readBlockMap(data: Buffer): Promise<BlockMap> {\n  return JSON.parse((await inflateRaw(data)).toString())\n}\n\nfunction formatBytes(value: number, symbol = \" KB\") {\n  return new Intl.NumberFormat(\"en\").format((value / 1024).toFixed(2) as any) + symbol\n}\n\n// safety\nfunction removeQuery(url: string) {\n  const index = url.indexOf(\"?\")\n  return index < 0 ? url : url.substring(0, index)\n}"]}
