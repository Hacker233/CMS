{"version":3,"file":"MacUpdater.js","sourceRoot":"","sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationToken, configureRequestOptionsFromUrl, DigestTransform, newError, ProgressCallbackTransform, RequestHeaders, safeGetHeader, safeStringifyJson, UpdateInfo } from \"builder-util-runtime\"\nimport { createServer, IncomingMessage, OutgoingHttpHeaders, ServerResponse } from \"http\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, UPDATE_DOWNLOADED } from \"./main\"\nimport { findFile } from \"./Provider\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  constructor(options?: AllPublishOptions) {\n    super(options)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n    this.nativeUpdater.on(\"update-downloaded\", () => {\n      this._logger.info(`New version ${this.updateInfo!.version} has been downloaded`)\n      this.emit(UPDATE_DOWNLOADED, this.updateInfo)\n    })\n  }\n\n  protected async doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const files = (await this.provider).resolveFiles(updateInfo)\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\n    if (zipFileInfo == null) {\n      throw newError(`ZIP file not provided: ${safeStringifyJson(files)}`, \"ERR_UPDATER_ZIP_FILE_NOT_FOUND\")\n    }\n\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\n    })\n\n    function getServerUrl() {\n      const address = server.address()\n      return `http://${address.address}:${address.port}`\n    }\n\n    const requestHeaders = await this.computeRequestHeaders()\n\n    return await new Promise<Array<string>>((resolve, reject) => {\n      server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n        const requestUrl = request.url!\n        this._logger.info(`${requestUrl} requested`)\n        if (requestUrl === \"/\") {\n          const data = Buffer.from(`{ \"url\": \"${getServerUrl()}/app.zip\" }`)\n          response.writeHead(200, {\"Content-Type\": \"application/json\", \"Content-Length\": data.length})\n          response.end(data)\n        }\n        else if (requestUrl.startsWith(\"/app.zip\")) {\n          let errorOccurred = false\n          response.on(\"finish\", () => {\n            try {\n              setImmediate(() => server.close())\n            }\n            finally {\n              if (!errorOccurred) {\n                this.nativeUpdater.removeListener(\"error\", reject)\n                resolve([])\n              }\n            }\n          })\n          this.doProxyUpdateFile(response, zipFileInfo.url.href, requestHeaders, zipFileInfo.info.sha512, cancellationToken, error => {\n            errorOccurred = true\n            try {\n              response.writeHead(500)\n              response.end()\n            }\n            finally {\n              this.nativeUpdater.removeListener(\"error\", reject)\n              reject(new Error(`Cannot download \"${zipFileInfo.url}\": ${error}`))\n            }\n          })\n        }\n        else {\n          this._logger.warn(`${requestUrl} requested, but not supported`)\n          response.writeHead(404)\n          response.end()\n        }\n      })\n      server.listen(0, \"127.0.0.1\", 16, () => {\n        this.nativeUpdater.setFeedURL(`${getServerUrl()}`, {\"Cache-Control\": \"no-cache\"})\n\n        this.nativeUpdater.once(\"error\", reject)\n        this.nativeUpdater.checkForUpdates()\n      })\n    })\n  }\n\n  private doProxyUpdateFile(nativeResponse: ServerResponse, url: string, headers: OutgoingHttpHeaders, sha512: string | null, cancellationToken: CancellationToken, errorHandler: (error: Error) => void) {\n    const downloadRequest = this.httpExecutor.doRequest(configureRequestOptionsFromUrl(url, {headers}), downloadResponse => {\n      if (downloadResponse.statusCode! >= 400) {\n        try {\n          nativeResponse.writeHead(404)\n          nativeResponse.end()\n        }\n        finally {\n          errorHandler(new Error(`Cannot download \"${url}\", status ${downloadResponse.statusCode}: ${downloadResponse.statusMessage}`))\n        }\n        return\n      }\n\n      // in tests Electron NET Api is not used, so, we have to handle redirect.\n      const redirectUrl = safeGetHeader(downloadResponse, \"location\")\n      if (redirectUrl != null) {\n        this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\n        return\n      }\n\n      const nativeHeaders: RequestHeaders = {\"Content-Type\": \"application/zip\"}\n      const streams: Array<any> = []\n      const downloadListenerCount = this.listenerCount(DOWNLOAD_PROGRESS)\n      this._logger.info(`${DOWNLOAD_PROGRESS} listener count: ${downloadListenerCount}`)\n      if (downloadListenerCount > 0) {\n        const contentLength = safeGetHeader(downloadResponse, \"content-length\")\n        this._logger.info(`contentLength: ${contentLength}`)\n        if (contentLength != null) {\n          nativeHeaders[\"Content-Length\"] = contentLength\n          streams.push(new ProgressCallbackTransform(parseInt(contentLength, 10), cancellationToken, it => this.emit(DOWNLOAD_PROGRESS, it)))\n        }\n      }\n\n      nativeResponse.writeHead(200, nativeHeaders)\n\n      // for mac only sha512 is produced (sha256 is published for windows only to preserve backward compatibility)\n      if (sha512 != null) {\n        // \"hex\" to easy migrate to new base64 encoded hash (we already produces latest-mac.yml with hex encoded hash)\n        streams.push(new DigestTransform(sha512, \"sha512\", sha512.length === 128 && !sha512.includes(\"+\") && !sha512.includes(\"Z\") && !sha512.includes(\"=\") ? \"hex\" : \"base64\"))\n      }\n\n      streams.push(nativeResponse)\n\n      let lastStream = downloadResponse\n      for (const stream of streams) {\n        stream.on(\"error\", errorHandler)\n        lastStream = lastStream.pipe(stream)\n      }\n    })\n\n    downloadRequest.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\n      if (headers.Authorization != null && (headers!!.Authorization as string).startsWith(\"token\")) {\n        const parsedNewUrl = new URL(redirectUrl)\n        if (parsedNewUrl.hostname.endsWith(\".amazonaws.com\")) {\n          delete headers.Authorization\n        }\n      }\n      this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\n    })\n    downloadRequest.on(\"error\", errorHandler)\n    downloadRequest.end()\n  }\n\n  quitAndInstall(): void {\n    this.nativeUpdater.quitAndInstall()\n  }\n}"]}
