{"version":3,"file":"BaseUpdater.js","sourceRoot":"","sources":["../src/BaseUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { UpdateInfo, AllPublishOptions, CancellationError, DownloadOptions } from \"builder-util-runtime\"\nimport { ensureDir, rename, unlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, ResolvedUpdateFileInfo, UPDATE_DOWNLOADED } from \"./main\"\n\nexport abstract class BaseUpdater extends AppUpdater {\n  protected quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  protected constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  async quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): Promise<void> {\n    this._logger.info(`Install on explicit quitAndInstall`)\n    const isInstalled = await this.install(isSilent, isSilent ? isForceRunAfter : true)\n    if (isInstalled) {\n      setImmediate(() => {\n        if (this.app.quit !== undefined) {\n          this.app.quit()\n        }\n      })\n    } else {\n      this.quitAndInstallCalled = false\n    }\n  }\n\n  protected async executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      taskOptions.downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    const updateInfo = taskOptions.updateInfo\n    const version = updateInfo.version\n    const fileInfo = taskOptions.fileInfo\n    const packageInfo = fileInfo.packageInfo\n\n    const cacheDir = this.downloadedUpdateHelper.cacheDir\n    await ensureDir(cacheDir)\n    const updateFileName = taskOptions.fileExtension === \"AppImage\" ? path.basename(updateInfo.path) : `installer-${version}.${taskOptions.fileExtension}`\n    const updateFile = path.join(cacheDir, updateFileName)\n    const packageFile = packageInfo == null ? null : path.join(cacheDir, `package-${version}.${path.extname(packageInfo.path) || \"7z\"}`)\n\n    const done = () => {\n      this.downloadedUpdateHelper.setDownloadedFile(updateFile, packageFile, updateInfo, fileInfo)\n      this.addQuitHandler()\n      this.emit(UPDATE_DOWNLOADED, updateInfo)\n      return packageFile == null ? [updateFile] : [updateFile, packageFile]\n    }\n\n    const log = this._logger\n    if (await this.downloadedUpdateHelper.validateDownloadedPath(updateFile, updateInfo, fileInfo, log)) {\n      return done()\n    }\n\n    const removeFileIfAny = () => {\n      this.downloadedUpdateHelper.clear()\n      return unlink(updateFile)\n        .catch(() => {\n          // ignored\n        })\n    }\n\n    // https://github.com/electron-userland/electron-builder/pull/2474#issuecomment-366481912\n    let nameCounter = 0\n    let tempUpdateFile = path.join(cacheDir, `temp-${updateFileName}`)\n    for (let i = 0; i < 3; i++) {\n      try {\n        await unlink(tempUpdateFile)\n      }\n      catch (e) {\n        if (e.code === \"ENOENT\") {\n          break\n        }\n\n        log.warn(`Error on remove temp update file: ${e}`)\n        tempUpdateFile = path.join(cacheDir, `temp-${nameCounter++}-${updateFileName}`)\n      }\n    }\n\n    try {\n      await taskOptions.task(tempUpdateFile, packageFile, removeFileIfAny)\n      await rename(tempUpdateFile, updateFile)\n    }\n    catch (e) {\n      await removeFileIfAny()\n\n      if (e instanceof CancellationError) {\n        log.info(\"Cancelled\")\n        this.emit(\"update-cancelled\", updateInfo)\n      }\n      throw e\n    }\n\n    log.info(`New version ${version} has been downloaded to ${updateFile}`)\n    return done()\n  }\n\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean\n\n  protected async install(isSilent: boolean, isRunAfter: boolean): Promise<boolean> {\n    if (this.quitAndInstallCalled) {\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper.file\n    // todo check (for now it is ok to no check as before, cached (from previous launch) update file checked in any case)\n    // const isValid = await this.isUpdateValid(installerPath)\n    if (installerPath == null) {\n      this.dispatchError(new Error(\"No valid update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    try {\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\n      return this.doInstall(installerPath, isSilent, isRunAfter)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      return false\n    }\n  }\n\n  protected addQuitHandler() {\n    if (this.quitHandlerAdded || !this.autoInstallOnAppQuit) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.once(\"quit\", async () => {\n      if (!this.quitAndInstallCalled) {\n        this._logger.info(\"Auto install update on quit\")\n        await this.install(true, false)\n      } else {\n        this._logger.info(\"Update installer has already been triggered. Quitting application.\")\n      }\n    })\n  }\n}\n\nexport interface DownloadExecutorTask {\n  readonly fileExtension: string\n  readonly downloadOptions: DownloadOptions\n  readonly fileInfo: ResolvedUpdateFileInfo\n  readonly updateInfo: UpdateInfo\n  readonly task: (destinationFile: string, packageFile: string | null, removeTempDirIfAny: () => Promise<any>) => Promise<any>\n}\n"]}
